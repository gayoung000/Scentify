import { create } from 'zustand';
import { AuthState } from '../types/AuthState';
import { loginUser, refreshAccessToken } from '../apis/user/login';
import { logoutUser } from '../apis/user/logout';
import { getAccessTokenFromCookie } from '../utils/token/getAccessTokenFromCookie';

export const useAuthStore = create<AuthState>((set, get) => ({
  accessToken: '',
  isAuthenticated: false,

  // ÏùºÎ∞ò Î°úÍ∑∏Ïù∏
  login: async (id, password) => {
    try {
      const data = await loginUser(id, password);
      set({ accessToken: data.accessToken, isAuthenticated: true });
    } catch (error) {
      console.log('Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ', error);
      throw error;
    }
  },

  // ‚úÖ ÏÜåÏÖú Î°úÍ∑∏Ïù∏ (Ïø†ÌÇ§ÏóêÏÑú ÏßÅÏ†ë ÌÜ†ÌÅ∞ÏùÑ Í∞ÄÏ†∏Ïò§ÎèÑÎ°ù Î≥ÄÍ≤Ω)
  loginWithSocial: async (provider: 'kakao' | 'google') => {
    try {
      // ‚úÖ Î∞±ÏóîÎìúÏóêÏÑú Ïø†ÌÇ§Î°ú ÌÜ†ÌÅ∞ÏùÑ ÏÑ§Ï†ïÌñàÏúºÎØÄÎ°ú, fetch ÎåÄÏã† Ïø†ÌÇ§ÏóêÏÑú ÏßÅÏ†ë Í∞ÄÏ†∏Ïò§Í∏∞
      const token = getAccessTokenFromCookie(); // üî• Ïø†ÌÇ§ÏóêÏÑú ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞
      if (token) {
        set({ accessToken: token, isAuthenticated: true });
        console.log(`${provider.toUpperCase()} Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ, ÌÜ†ÌÅ∞ Ï†ÄÏû•:`, token);
        return token;
      } else {
        set({ accessToken: '', isAuthenticated: false });
        console.error(`${provider.toUpperCase()} Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ÌÜ†ÌÅ∞ ÏóÜÏùå`);
        return null;
      }
    } catch (error) {
      console.error(`${provider.toUpperCase()} Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:`, error);
      return null;
    }
  },

  // ÌÜ†ÌÅ∞ÏùÑ ÏßÅÏ†ë Î∞õÏïÑ Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
  loginWithToken: (token: string) => {
    set({ accessToken: token, isAuthenticated: true });
    console.log('üîë ÌÜ†ÌÅ∞ Í∏∞Î∞ò Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', token);
  },

  // Î°úÍ∑∏ÏïÑÏõÉ
  logout: async () => {
    try {
      await logoutUser();
      set({ accessToken: '', isAuthenticated: false });
    } catch (error) {
      console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®:', error);
      throw error;
    }
  },

  getAccessToken: () => {
    return get().accessToken;
  },

  reissueAccessToken: async () => {
    try {
      const data = await refreshAccessToken();
      set({ accessToken: data.accessToken, isAuthenticated: true });
    } catch (error) {
      console.error('ÌÜ†ÌÅ∞ Í∞±Ïã† Ïã§Ìå®:', error);
      set({ accessToken: '', isAuthenticated: false });
    }
  },
}));
