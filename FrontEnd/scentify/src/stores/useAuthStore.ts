import { create } from 'zustand';
import { AuthState } from '../types/AuthState';
import { loginUser, refreshAccessToken } from '../apis/user/login';
import { logoutUser } from '../apis/user/logout';

export const useAuthStore = create<AuthState>((set, get) => ({
  accessToken: '',
  isAuthenticated: false,

  // ÏùºÎ∞ò Î°úÍ∑∏Ïù∏
  login: async (id, password) => {
    try {
      const data = await loginUser(id, password);
      set({ accessToken: data.accessToken, isAuthenticated: true });
    } catch (error) {
      console.log('Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ', error);
      throw error;
    }
  },

  // ‚úÖ ÏÜåÏÖú Î°úÍ∑∏Ïù∏ (Ïø†ÌÇ§ÏóêÏÑú ÏßÅÏ†ë ÌÜ†ÌÅ∞ÏùÑ Í∞ÄÏ†∏Ïò§ÎèÑÎ°ù Î≥ÄÍ≤Ω)
  loginWithSocial: async (provider: 'kakao' | 'google') => {
    try {
      // Îã§Ïãú Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Access ÌÜ†ÌÅ∞ Î∞úÍ∏âÌïòÍ∏∞
      const response = await fetch('/v1/auth/kakao/token/issue', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
      });

      if (!response.ok) {
        throw new Error('Î°úÍ∑∏Ïù∏ Ïã§Ìå®');
      }

      // Ìó§ÎçîÏóêÏÑú Authorization Í∞ÄÏ†∏Ïò§Í∏∞
      const authHeader = response.headers.get('Authorization');

      if (!authHeader) {
        throw new Error('Authorization Ìó§ÎçîÍ∞Ä ÏóÜÏäµÎãàÎã§.');
      }

      const accessToken = authHeader.split(' ')[1];

      if (accessToken) {
        set({ accessToken: accessToken, isAuthenticated: true });
        console.log(`${provider.toUpperCase()} Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ, ÌÜ†ÌÅ∞ Ï†ÄÏû•`);
        return accessToken;
      } else {
        set({ accessToken: '', isAuthenticated: false });
        console.error(`${provider.toUpperCase()} Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ÌÜ†ÌÅ∞ ÏóÜÏùå`);
        return null;
      }
    } catch (error) {
      console.error(`${provider.toUpperCase()} Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:`, error);
      return null;
    }
  },

  // ÌÜ†ÌÅ∞ÏùÑ ÏßÅÏ†ë Î∞õÏïÑ Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
  /** 
  loginWithToken: (token: string) => {
    set({ accessToken: token, isAuthenticated: true });
    console.log('üîë ÌÜ†ÌÅ∞ Í∏∞Î∞ò Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', token);
  },
  */

  // Î°úÍ∑∏ÏïÑÏõÉ
  logout: async () => {
    try {
      await logoutUser();
      set({ accessToken: '', isAuthenticated: false });
    } catch (error) {
      console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®:', error);
      throw error;
    }
  },

  getAccessToken: () => {
    return get().accessToken;
  },

  reissueAccessToken: async () => {
    try {
      const data = await refreshAccessToken();
      set({ accessToken: data.accessToken, isAuthenticated: true });
    } catch (error) {
      console.error('ÌÜ†ÌÅ∞ Í∞±Ïã† Ïã§Ìå®:', error);
      set({ accessToken: '', isAuthenticated: false });
    }
  },
}));
